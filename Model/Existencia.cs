//------------------------------------------------------------------------------
// <auto-generated>
//     Este código se generó a partir de una plantilla.
//
//     Los cambios manuales en este archivo pueden causar un comportamiento inesperado de la aplicación.
//     Los cambios manuales en este archivo se sobrescribirán si se regenera el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CentroNaturistaMasaya.Model
{
    using System;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.Collections.Specialized;
    using System.ComponentModel;
    using System.Runtime.CompilerServices;

    public partial class Existencia : INotifyPropertyChanged
    {

        #region Definición de los atributos del modelo
        private int _idExistencia;
        private int _idPresentacion;
        private int _idProducto;
        private int _cantidad;
        private double _precio;
        private DateTime? _caducidad;
        private DateTime? _fechaEntrada;
        private Presentacion _presentacion;
        private Producto _producto;
        #endregion

        #region Métodos Set-Get de los atributos
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2214:DoNotCallOverridableMethodsInConstructors")]
        public Existencia()
        {
            this.ContenidoS = new HashSet<ContenidoS>();
            this.ContenidoV = new HashSet<ContenidoV>();
        }
        public int idExistencia
        {
            get => _idExistencia;
            set
            {
                _idExistencia = value;
                OnPropertyChanged(nameof(idExistencia));
            }
        }
        public int idPresentacion
        {
            get => _idPresentacion;
            set
            {
                _idPresentacion = value;
                OnPropertyChanged(nameof(idPresentacion));
            }
        }
        public int idProducto
        {
            get => _idProducto;
            set
            {
                _idProducto = value;
                OnPropertyChanged(nameof(idProducto));
            }
        }
        public int Cantidad
        {
            get => _cantidad;
            set
            {
                _cantidad = value;
                OnPropertyChanged(nameof(Cantidad));
            }
        }
        public double Precio
        {
            get => _precio;
            set
            {
                _precio = value;
                OnPropertyChanged(nameof(Precio));
            }
        }
        public Nullable<System.DateTime> Caducidad
        {
            get => _caducidad;
            set
            {
                _caducidad = value;
                OnPropertyChanged(nameof(Caducidad));
            }
        }
        public Nullable<System.DateTime> fechaEntrada
        {
            get => _fechaEntrada;
            set
            {
                _fechaEntrada = value;
                OnPropertyChanged(nameof(fechaEntrada));
            }
        }
        public virtual Presentacion Presentacion
        {
            get => _presentacion;
            set
            {
                _presentacion = value;
                OnPropertyChanged(nameof(Presentacion));
            }
        }
        public virtual Producto Producto
        {
            get => _producto;
            set
            {
                _producto = value;
                OnPropertyChanged(nameof(Producto));
            }
        }
        #endregion

        #region Entidades que tiene como llave foranea a Existencia
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<ContenidoS> ContenidoS { get; set; }
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<ContenidoV> ContenidoV { get; set; }
        #endregion

        #region Métodos del PropertyChanged
        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
        #endregion

        #region Lista de existencias
        private ObservableCollection<Existencia> _registrosExistencia;
        public ObservableCollection<Existencia> registrosExistencia
        {
            get => _registrosExistencia;
            set
            {
                _registrosExistencia = value;
                OnPropertyChanged(nameof(registrosExistencia));
            }
        }
        public void RegistrosExistencia_CollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            OnPropertyChanged(nameof(registrosExistencia));
        }
        #endregion
    }
}
